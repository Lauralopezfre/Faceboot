package Frame;

import Repositorios.Control;
import TextPrompt.TextPrompt;
import com.mongodb.client.MongoDatabase;
import com.sun.istack.internal.FragmentContentHandler;
import entity.Post;
import entity.Usuario;
import java.awt.Frame;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Estefanía Aguilar
 */
public class FrmPantallaInicio extends javax.swing.JFrame {

    Control control;
    Usuario usuario;
    MongoDatabase mongo;

    /**
     * Método constructor que se encarga de inicializar el frame de pantalla de inicio
     * @param padre Frame donde es llamado.
     * @param mongo Base de datos de Faceboot.
     * @param usuario Usuario que inicio sesión.
     */
    public FrmPantallaInicio(Frame padre, MongoDatabase mongo, Usuario usuario) {
        initComponents();
        this.setTitle("Faceboot");
        this.setLocationRelativeTo(null);
        control = new Control();
        this.mongo = mongo;
        this.usuario = usuario;
        lblNombreUsuario.setText(usuario.getNombre());
        mensajeCamposTexto();
        mostrarPublicaciones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        PanelPublicaciones = new javax.swing.JPanel();
        lblIcono = new javax.swing.JLabel();
        txtMensaje = new javax.swing.JTextField();
        lblEnviar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        lblHola = new javax.swing.JLabel();
        lblNombreUsuario = new javax.swing.JLabel();
        jmenu = new javax.swing.JMenuBar();
        MenuUsuario = new javax.swing.JMenu();
        menuEitarDatos = new javax.swing.JMenuItem();
        menuCerrarSesion = new javax.swing.JMenuItem();
        menuEditarPost = new javax.swing.JMenu();
        MenuEliminar = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PanelPublicaciones.setBackground(new java.awt.Color(204, 204, 255));
        PanelPublicaciones.setLayout(new java.awt.GridLayout(100, 0));
        jScrollPane1.setViewportView(PanelPublicaciones);

        lblIcono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/avatar.png"))); // NOI18N

        txtMensaje.setFont(new java.awt.Font("Calibri Light", 0, 20)); // NOI18N
        txtMensaje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMensajeActionPerformed(evt);
            }
        });

        lblEnviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/send.png"))); // NOI18N
        lblEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblEnviarActionPerformed(evt);
            }
        });

        jLabel2.setText("¿Qué estás pensando?");

        lblHola.setFont(new java.awt.Font("Calibri Light", 0, 24)); // NOI18N
        lblHola.setText("Hola:");

        lblNombreUsuario.setFont(new java.awt.Font("Calibri Light", 1, 24)); // NOI18N

        jmenu.setToolTipText("");

        MenuUsuario.setText("Usuario");
        MenuUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuUsuarioMouseClicked(evt);
            }
        });

        menuEitarDatos.setText("Editar datos");
        menuEitarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEitarDatosActionPerformed(evt);
            }
        });
        MenuUsuario.add(menuEitarDatos);

        menuCerrarSesion.setText("Cerrar sesión");
        menuCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCerrarSesionActionPerformed(evt);
            }
        });
        MenuUsuario.add(menuCerrarSesion);

        jmenu.add(MenuUsuario);

        menuEditarPost.setText("Publicación");
        menuEditarPost.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuEditarPostMouseClicked(evt);
            }
        });

        MenuEliminar.setText("Eliminar");
        MenuEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuEliminarActionPerformed(evt);
            }
        });
        menuEditarPost.add(MenuEliminar);

        jMenuItem1.setText("Buscar");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuEditarPost.add(jMenuItem1);

        jmenu.add(menuEditarPost);

        setJMenuBar(jmenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblIcono)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblHola, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblNombreUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNombreUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblIcono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblEnviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuUsuarioMouseClicked

    }//GEN-LAST:event_MenuUsuarioMouseClicked

    private void menuEditarPostMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuEditarPostMouseClicked

    }//GEN-LAST:event_menuEditarPostMouseClicked

    private void menuEitarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEitarDatosActionPerformed
        FrmUsuario frmUsuario = new FrmUsuario(this, mongo, usuario);
        frmUsuario.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menuEitarDatosActionPerformed

    private void lblEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblEnviarActionPerformed
        //Guarda la publicación
        guardar();
        //Elimina las publicaciones que ya estaban en pantalla
        PanelPublicaciones.removeAll();
        //Vuelve a mostrar con la nueva publicación.
        mostrarPublicaciones();
    }//GEN-LAST:event_lblEnviarActionPerformed

    private void MenuEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuEliminarActionPerformed
        //Eliminar post
        EliminacionPost ep = new EliminacionPost(usuario, mongo);
        ep.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_MenuEliminarActionPerformed

    private void menuCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCerrarSesionActionPerformed
        FrmInicioSesion frmInicioSesion = new FrmInicioSesion();
        frmInicioSesion.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_menuCerrarSesionActionPerformed

    private void txtMensajeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMensajeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMensajeActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        BusquedaPosts frmbp = new BusquedaPosts(this.usuario, this.mongo);
        frmbp.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1MouseClicked

    /**
     * Método que se encarga de mostrar todas las publicaciones en la pantalla de inicio.
     */
    public void mostrarPublicaciones() {
        //Obtengo todas las publicaciones de la base de datos.
        ArrayList<Post> publiciones = reorganizarPublicaciones();
        //Ordenar las publicaciones por orden        

        //Creo una lista donde iran los formatos
        ArrayList<Publicacion> formatoPost = new ArrayList<>();
        
        //Creo los formatos con la lista de publicaciones de la base de datos
        for (Post publicacion : publiciones) {
            formatoPost.add(new Publicacion(mongo, publicacion, usuario));
        }
        //Agrego los formatos al panel
        for (Publicacion publicacion : formatoPost) {
            PanelPublicaciones.add(publicacion);
            PanelPublicaciones.updateUI();
        }
    }

    /**
     * Método que se encarga de guardar la publicación en la base de datos.
     */
    public void guardar() {
        //Primero valida que se haya ingreso un mensaje antes.
        if(!txtMensaje.getText().equalsIgnoreCase("")){
        
        //Separar mensaje de tags
        String mensajeCompleto = txtMensaje.getText();
        String mensaje = "";
        String tag = " ";
        ArrayList<String> tags = new ArrayList<>();
        for (int i = 0; i < mensajeCompleto.length(); i++) {
            if (mensajeCompleto.charAt(i) == '#') {
                i++;
                while (i < mensajeCompleto.length()) {
                    if (mensajeCompleto.charAt(i) != ' ') {
                        tag = tag + mensajeCompleto.charAt(i);
                        i++;
                    } else {
                        break;
                    }
                }
                tags.add(tag);
                tag = "";
            } else {
                mensaje = mensaje + mensajeCompleto.charAt(i);
            }
        }
        
        //Almacena en la base de datos.
        control.getPostRepository().crearDocument(control.getPostRepository().crearCollection(mongo),
                new Post(new Date(), mensaje, tags, usuario));
        
        //Muestra un mensaje indicando que la operación se ha realizado con exito.
        JOptionPane.showMessageDialog(this, "Se ha agregado una nueva publicación",
                "Operación exitosa", JOptionPane.INFORMATION_MESSAGE);

        //Limpia el campo para ingresar una nueva publicación.
        txtMensaje.setText("");
        }else{
            //Si no se ha ingreso un mensaje entonces muestra un mensaje indicandolo.
            JOptionPane.showMessageDialog(this, "No ha creado un mensaje",
                "Alerta", JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * Método que se encarga de organizar las publicaciones del mas reciente al mas viejo.
     * @return Publicaciones ordenadas
     */
    public ArrayList<Post> reorganizarPublicaciones() {
        //Obtiene todas las publicaciones de la base de datos.
        ArrayList<Post> publicaciones
                = control.getPostRepository().buscarTodas(control.getPostRepository().crearCollection(mongo));
        //Lista que almacenara las publicaciones ordenadas.
        ArrayList<Post> AuxOrganizados = new ArrayList<>();
        //Recorre la lista de publicaciones.
        for (int i = publicaciones.size()-1; i >= 0; i--) {
            AuxOrganizados.add(publicaciones.get(i));
        }
        //Regresa la lista con las publicaciones ordenadas.
        return AuxOrganizados;
    }
    /**
     * Método que se encarga de mostrar un mensaje en los campos de textos.
     */
    public void mensajeCamposTexto(){
        //Campo de nombre
        TextPrompt nombre = new TextPrompt("Ej. Buenos dias a todos #FelizLunes #BuenosDias", txtMensaje);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuEliminar;
    private javax.swing.JMenu MenuUsuario;
    private javax.swing.JPanel PanelPublicaciones;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar jmenu;
    private javax.swing.JButton lblEnviar;
    private javax.swing.JLabel lblHola;
    private javax.swing.JLabel lblIcono;
    private javax.swing.JLabel lblNombreUsuario;
    private javax.swing.JMenuItem menuCerrarSesion;
    private javax.swing.JMenu menuEditarPost;
    private javax.swing.JMenuItem menuEitarDatos;
    private javax.swing.JTextField txtMensaje;
    // End of variables declaration//GEN-END:variables
}
